{"version":3,"sources":["scripts/logics.js","scripts/main.js"],"names":["startRestart","cells","cellsArr","i","empty","getEmptyList","sort","makeRandomArr","randomNum","coordinates","getIndexFromNumber","pop","insertTwoOrFour","getNumberFromIndex","j","Number","num","tempNum","Math","floor","arr","x","y","random","length","push","a","b","moveLeft","gameScore","notMove","dontMove","cloneArr","score","filter","flat","Infinity","join","moveRight","unshift","moveUp","JSON","parse","stringify","column","moveDown","checkProgress","progress","printArr","fieldCell","className","button","document","getElementById","gameScoreHTML","getElementsByClassName","messageStart","querySelector","messageLose","messageWin","addEventListener","innerHTML","classList","remove","add","onkeydown","e","preventDefault","key","includes"],"mappings":"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","file":"main.da4a9a25.js","sourceRoot":"..\\src","sourcesContent":["function startRestart(cells) {\n  let cellsArr = cells;\n\n  cellsArr = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  let i = 0;\n\n  while (i < 2) {\n    const empty = getEmptyList(cellsArr);\n\n    empty.sort(makeRandomArr);\n\n    const randomNum = empty.pop();\n    const coordinates = getIndexFromNumber(randomNum);\n\n    cellsArr = insertTwoOrFour(cellsArr, coordinates[0], coordinates[1]);\n    i++;\n  }\n\n  return cellsArr;\n}\n\nfunction getNumberFromIndex(i, j) {\n  return (i * 4) + Number(j) + 1;\n}\n\nfunction getIndexFromNumber(num) {\n  let tempNum = num;\n\n  tempNum -= 1;\n\n  const x = Math.floor(tempNum / 4);\n  const y = tempNum % 4;\n\n  return [x, y];\n}\n\nfunction insertTwoOrFour(arr, x, y) {\n  if (Math.random() <= 0.75) {\n    arr[x][y] = 2;\n  } else {\n    arr[x][y] = 4;\n  }\n\n  return arr;\n}\n\nfunction getEmptyList(arr) {\n  const empty = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (const j in arr) {\n      if (arr[i][j] === 0) {\n        const num = getNumberFromIndex(i, j);\n\n        empty.push(num);\n      }\n    }\n  }\n\n  return empty;\n}\n\nfunction makeRandomArr(a, b) {\n  return Math.random() - 0.5;\n}\n\nfunction moveLeft(arr, gameScore, notMove) {\n  let dontMove = notMove;\n  const cloneArr = [...arr];\n  let score = gameScore;\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].filter(num => num !== 0);\n\n    while (arr[i].length < 4) {\n      arr[i].push(0);\n    }\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j <= 3; j++) {\n      if (arr[i][j] === arr[i][j + 1] && arr[i][j] !== 0) {\n        arr[i][j] *= 2;\n        score += arr[i][j];\n        arr[i][j + 1] = 0;\n      }\n    }\n  }\n\n  arr.flat(Infinity).join('') === cloneArr.flat(Infinity).join('')\n    ? dontMove = true\n    : dontMove = false;\n\n  return [arr, score, dontMove];\n}\n\nfunction moveRight(arr, gameScore, notMove) {\n  let dontMove = notMove;\n  const cloneArr = [...arr];\n  let score = gameScore;\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].filter(num => num !== 0);\n\n    while (arr[i].length < 4) {\n      arr[i].unshift(0);\n    }\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 3; j > 0; j--) {\n      if (arr[i][j] === arr[i][j - 1] && arr[i][j] !== 0) {\n        arr[i][j] *= 2;\n        score += arr[i][j];\n        arr[i][j - 1] = 0;\n      }\n    }\n  }\n\n  arr.flat(Infinity).join('') === cloneArr.flat(Infinity).join('')\n    ? dontMove = true\n    : dontMove = false;\n\n  return [arr, score, dontMove];\n}\n\nfunction moveUp(arr, gameScore, notMove) {\n  let dontMove = notMove;\n  const cloneArr = JSON.parse(JSON.stringify(arr));\n  let score = gameScore;\n  let j = 0;\n  let column = [];\n\n  while (j < 4) {\n    for (let i = 0; i < arr.length; i++) {\n      column.push(arr[i][j]);\n    }\n    column = column.filter(num => num !== 0);\n\n    while (column.length < 4) {\n      column.push(0);\n    }\n\n    for (let i = 0; i < 3; i++) {\n      if (column[i] === column[i + 1] && column[i] !== 0) {\n        column[i] *= 2;\n        score += column[i];\n        column[i + 1] = 0;\n      }\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i][j] = column[i];\n    }\n    column = [];\n    j++;\n  }\n\n  arr.flat(Infinity).join('') === cloneArr.flat(Infinity).join('')\n    ? dontMove = true\n    : dontMove = false;\n\n  return [arr, score, dontMove];\n}\n\nfunction moveDown(arr, gameScore, notMove) {\n  let dontMove = notMove;\n  const cloneArr = JSON.parse(JSON.stringify(arr));\n  let score = gameScore;\n  let j = 0;\n  let column = [];\n\n  while (j < 4) {\n    for (let i = 0; i < arr.length; i++) {\n      column.push(arr[i][j]);\n    }\n    column = column.filter(num => num !== 0);\n\n    while (column.length < 4) {\n      column.unshift(0);\n    }\n\n    for (let i = 3; i > 0; i--) {\n      if (column[i] === column[i - 1] && column[i] !== 0) {\n        column[i] *= 2;\n        score += column[i];\n        column[i - 1] = 0;\n      }\n    }\n\n    for (let i = 0; i < arr.length; i++) {\n      arr[i][j] = column[i];\n    }\n    column = [];\n    j++;\n  }\n\n  arr.flat(Infinity).join('') === cloneArr.flat(Infinity).join('')\n    ? dontMove = true\n    : dontMove = false;\n\n  return [arr, score, dontMove];\n}\n\nfunction checkProgress(arr) {\n  let progress;\n  let num = 0;\n  let column = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j <= 3; j++) {\n      if (arr[i][j] === arr[i][j + 1] && arr[i][j] !== 0) {\n        progress = true;\n      }\n    }\n  }\n\n  while (num < 4) {\n    for (let i = 0; i < arr.length; i++) {\n      column.push(arr[i][num]);\n    }\n\n    for (let i = 0; i < 3; i++) {\n      if (column[i] === column[i + 1] && column[i] !== 0) {\n        progress = true;\n      }\n    }\n    column = [];\n    num++;\n  }\n\n  return progress === true ? progress : false;\n}\n\nfunction printArr(cells, fieldCell) {\n  for (let i = 0; i < 16; i++) {\n    if (cells.flat(Infinity)[i] !== 0) {\n      fieldCell[i]\n        .className = `field-cell field-cell--${cells.flat(Infinity)[i]}`;\n    } else {\n      fieldCell[i].className = 'field-cell';\n    }\n  }\n\n  return cells;\n}\n\nexport {\n  startRestart,\n  printArr,\n  checkProgress,\n  moveDown,\n  moveUp,\n  moveRight,\n  moveLeft,\n  getIndexFromNumber,\n  insertTwoOrFour,\n  getEmptyList,\n  makeRandomArr,\n};\n","\nimport {\n  startRestart,\n  printArr,\n  checkProgress,\n  moveDown,\n  moveUp,\n  moveRight,\n  moveLeft,\n  getIndexFromNumber,\n  insertTwoOrFour,\n  getEmptyList,\n  makeRandomArr,\n} from './logics.js';\n\nlet cells = [];\nlet cellsArr;\nlet gameScore = 0;\nconst notMove = false;\n\nconst button = document.getElementById('start');\nconst gameScoreHTML = document.getElementById('game-score');\nconst fieldCell = document.getElementsByClassName('field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nbutton.addEventListener('click', function() {\n  cells = startRestart(cells);\n  button.innerHTML = 'Restart';\n  button.classList.remove('start');\n  button.classList.add('restart');\n  printArr(cells, fieldCell);\n  gameScore = 0;\n  gameScoreHTML.innerHTML = 0;\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n});\n\ndocument.onkeydown = function(e) {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      cellsArr = moveLeft(cells, gameScore, notMove);\n      cells = printArr(cellsArr[0], fieldCell);\n      break;\n    case 'ArrowRight':\n      cellsArr = moveRight(cells, gameScore, notMove);\n      cells = printArr(cellsArr[0], fieldCell);\n      break;\n    case 'ArrowUp':\n      cellsArr = moveUp(cells, gameScore, notMove);\n      cells = printArr(cellsArr[0], fieldCell);\n      break;\n    case 'ArrowDown':\n      cellsArr = moveDown(cells, gameScore, notMove);\n      cells = printArr(cellsArr[0], fieldCell);\n      break;\n    default:\n      break;\n  }\n\n  if (!cellsArr[2]) {\n    const empty = getEmptyList(cells);\n\n    empty.sort(makeRandomArr);\n\n    const randomNum = empty.pop();\n    const coordinates = getIndexFromNumber(randomNum);\n\n    cells = insertTwoOrFour(cells, coordinates[0], coordinates[1]);\n    cells = printArr(cells, fieldCell);\n    gameScore = cellsArr[1];\n    gameScoreHTML.innerHTML = `${gameScore}`;\n  }\n\n  if (!cells.flat(Infinity).includes(0) && !checkProgress(cells)) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (cells.flat(Infinity).includes(2048)) {\n    messageWin.classList.remove('hidden');\n  }\n};\n"]}